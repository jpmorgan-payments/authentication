{
	"info": {
		"_postman_id": "55b2f95c-bee7-4f22-9252-aac9c137fd67",
		"name": "Authentication",
		"description": "This is a collection with examples on connecting to J.P. Morgan APIs using either OAuth or mTLS.\n\nYou will find instructions on how to use both within the collection.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26402882"
	},
	"item": [
		{
			"name": "TLS/SSL",
			"item": [
				{
					"name": "JWT/Digital Signature",
					"item": [
						{
							"name": "Initiate a Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.code(202);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"endToEndId\", jsonData.paymentInitiationResponse.endToEndId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{JWSPayload}}",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://apigatewaycat.jpmorgan.com/tsapi/v1/payments",
									"protocol": "https",
									"host": [
										"apigatewaycat",
										"jpmorgan",
										"com"
									],
									"path": [
										"tsapi",
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const navigator = {} //fake a navigator object for the lib\r",
											"const window = {} //fake a window object for the lib\r",
											"pm.sendRequest(\"https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\", (error, response) => {\r",
											"if (error || response.code !== 200) {\r",
											"    pm.expect.fail('Could not load external library')\r",
											"}\r",
											"eval(response.text())\r",
											"\r",
											"var myRequest = JSON.stringify(request.data)\r",
											"myRequest = myRequest.replace(/\\\\n/g,\"\")\r",
											"myRequest = myRequest.replace(/\\\\r/g,\"\")\r",
											"myRequest = myRequest.replace(/\\\\/g,\"\")\r",
											"mylength = myRequest.length\r",
											"myRequest = myRequest.substring(1,mylength-1)\r",
											"// console.log(mylength)\r",
											"console.log(myRequest)\r",
											"\r",
											"var header = {\"alg\" : \"RS256\"}\r",
											"\r",
											"var sHeader = JSON.stringify(header)\r",
											"var sPayload = JSON.stringify(data)\r",
											"\r",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, myRequest,pm.environment.get(\"Priv_Key\"))\r",
											"console.log(sJWT)\r",
											"console.log(pm.environment.get(\"Priv_Key\"))\r",
											"pm.environment.set(\"JWSPayload\",sJWT)\r",
											"//console.log(sJWT)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"myDateVar = new Date()\r",
											"\r",
											"myFDate = myDateVar.getFullYear() + \"-\" +\r",
											"          (\"0\" + (myDateVar.getMonth() + 1)).slice(-2) + \"-\" +\r",
											"          (\"0\" + (myDateVar.getDate() + 1)).slice(-2)\r",
											"\r",
											"//Create the endToEndId\r",
											"myE2E = \"ACHC\" + \r",
											"        (\"0\" + (myDateVar.getMonth() + 1)).slice(-2) + \r",
											"        (\"0\" + myDateVar.getDate()).slice(-2)  +\r",
											"        (\"0\" + myDateVar.getHours()).slice(-2) + \r",
											"        (\"0\" + myDateVar.getMinutes()).slice(-2) + \r",
											"        (\"0\" + myDateVar.getMilliseconds()).slice(-3) \r",
											"\r",
											"pm.environment.set(\"End2EndID\",JSON.stringify(myE2E))\r",
											"pm.environment.set(\"execDate\",JSON.stringify(myFDate))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payments\": {\r\n    \"requestedExecutionDate\": \"2023-09-04\",\r\n    \"paymentAmount\": 25,\r\n    \"paymentType\": \"RTP\",\r\n    \"paymentIdentifiers\": {\r\n      \"endToEndId\": \"uf169382486039811\"\r\n    },\r\n    \"paymentCurrency\": \"EUR\",\r\n    \"transferType\": \"CREDIT\",\r\n    \"debtor\": {\r\n      \"debtorName\": \"OBGLRTPCL1 Account\",\r\n      \"debtorAccount\": {\r\n        \"accountId\": \"DE88501108006231400596\",\r\n        \"accountCurrency\": \"EUR\",\r\n        \"accountType\": \"IBAN\"\r\n      }\r\n    },\r\n    \"debtorAgent\": {\r\n      \"financialInstitutionId\": {\r\n        \"bic\": \"CHASDEFX\"\r\n      }\r\n    },\r\n    \"creditor\": {\r\n      \"creditorName\": \"UNICORNUAT Account\",\r\n      \"creditorAccount\": {\r\n        \"accountId\": \"DE45501108000041287103\",\r\n        \"accountCurrency\": \"EUR\"\r\n      }\r\n    },\r\n    \"creditorAgent\": {\r\n      \"financialInstitutionId\": {\r\n        \"bic\": \"CHASDEFX\"\r\n      }\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection demonstrates the process of generating a JWT/Digital Signature directly from Postman. Certain requests within our UAT/Prod environments necessitate this encoding in the JSON body.\n\nTo execute this collection:\n\n1. Acquire your certificates and onboard them to J.P. Morgan following instructions here: [http://developer.jpmorgan.com](http://developer.jpmorgan.com/).\n2. Upload these certificates to postman following directions: [https://learning.postman.com/docs/sending-requests/certificates/#adding-client-certificates](https://learning.postman.com/docs/sending-requests/certificates/#adding-client-certificates).\n    \n3. Collect your private key and include it in your Postman variables as 'priv_key'.\n4. Copy the request body into the sign payload request.\n5. Execute the sign payload request.\n6. Execute the initiate a payment request."
				},
				{
					"name": "Global-payments-payment-status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://apigatewaycat.jpmorgan.com/tsapi/v1/payments/status?endToEndId=uf1682944782231",
							"protocol": "https",
							"host": [
								"apigatewaycat",
								"jpmorgan",
								"com"
							],
							"path": [
								"tsapi",
								"v1",
								"payments",
								"status"
							],
							"query": [
								{
									"key": "endToEndId",
									"value": "uf1682944782231"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "This collection illustrates how to access our APIs utilizing mTLS authentication.\n\nDetailed guidance on generating your certificates and integrating them with J.P. Morgan can be found at [http://developer.jpmorgan.com](http://developer.jpmorgan.com/).\n\nSubsequently, you can incorporate them into Postman by following these instructions: [https://learning.postman.com/docs/sending-requests/certificates/#adding-client-certificates](https://learning.postman.com/docs/sending-requests/certificates/#adding-client-certificates)."
		},
		{
			"name": "OAuth",
			"item": [
				{
					"name": "JWT/Digital Signature",
					"item": [
						{
							"name": "Initiate a Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.code(202);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"endToEndId\", jsonData.paymentInitiationResponse.endToEndId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{JWSPayload}}",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://apigatewaycat.jpmorgan.com/tsapi/v1/payments",
									"protocol": "https",
									"host": [
										"apigatewaycat",
										"jpmorgan",
										"com"
									],
									"path": [
										"tsapi",
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const navigator = {} //fake a navigator object for the lib\r",
											"const window = {} //fake a window object for the lib\r",
											"pm.sendRequest(\"https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\", (error, response) => {\r",
											"if (error || response.code !== 200) {\r",
											"    pm.expect.fail('Could not load external library')\r",
											"}\r",
											"eval(response.text())\r",
											"\r",
											"var myRequest = JSON.stringify(request.data)\r",
											"myRequest = myRequest.replace(/\\\\n/g,\"\")\r",
											"myRequest = myRequest.replace(/\\\\r/g,\"\")\r",
											"myRequest = myRequest.replace(/\\\\/g,\"\")\r",
											"mylength = myRequest.length\r",
											"myRequest = myRequest.substring(1,mylength-1)\r",
											"// console.log(mylength)\r",
											"console.log(myRequest)\r",
											"\r",
											"var header = {\"alg\" : \"RS256\"}\r",
											"\r",
											"var sHeader = JSON.stringify(header)\r",
											"var sPayload = JSON.stringify(data)\r",
											"\r",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, myRequest,pm.environment.get(\"Priv_Key\"))\r",
											"console.log(sJWT)\r",
											"console.log(pm.environment.get(\"Priv_Key\"))\r",
											"pm.environment.set(\"JWSPayload\",sJWT)\r",
											"//console.log(sJWT)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"myDateVar = new Date()\r",
											"\r",
											"myFDate = myDateVar.getFullYear() + \"-\" +\r",
											"          (\"0\" + (myDateVar.getMonth() + 1)).slice(-2) + \"-\" +\r",
											"          (\"0\" + (myDateVar.getDate() + 1)).slice(-2)\r",
											"\r",
											"//Create the endToEndId\r",
											"myE2E = \"ACHC\" + \r",
											"        (\"0\" + (myDateVar.getMonth() + 1)).slice(-2) + \r",
											"        (\"0\" + myDateVar.getDate()).slice(-2)  +\r",
											"        (\"0\" + myDateVar.getHours()).slice(-2) + \r",
											"        (\"0\" + myDateVar.getMinutes()).slice(-2) + \r",
											"        (\"0\" + myDateVar.getMilliseconds()).slice(-3) \r",
											"\r",
											"pm.environment.set(\"End2EndID\",JSON.stringify(myE2E))\r",
											"pm.environment.set(\"execDate\",JSON.stringify(myFDate))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payments\": {\r\n    \"requestedExecutionDate\": \"2023-09-04\",\r\n    \"paymentAmount\": 25,\r\n    \"paymentType\": \"RTP\",\r\n    \"paymentIdentifiers\": {\r\n      \"endToEndId\": \"uf169382486039811\"\r\n    },\r\n    \"paymentCurrency\": \"EUR\",\r\n    \"transferType\": \"CREDIT\",\r\n    \"debtor\": {\r\n      \"debtorName\": \"OBGLRTPCL1 Account\",\r\n      \"debtorAccount\": {\r\n        \"accountId\": \"DE88501108006231400596\",\r\n        \"accountCurrency\": \"EUR\",\r\n        \"accountType\": \"IBAN\"\r\n      }\r\n    },\r\n    \"debtorAgent\": {\r\n      \"financialInstitutionId\": {\r\n        \"bic\": \"CHASDEFX\"\r\n      }\r\n    },\r\n    \"creditor\": {\r\n      \"creditorName\": \"UNICORNUAT Account\",\r\n      \"creditorAccount\": {\r\n        \"accountId\": \"DE45501108000041287103\",\r\n        \"accountCurrency\": \"EUR\"\r\n      }\r\n    },\r\n    \"creditorAgent\": {\r\n      \"financialInstitutionId\": {\r\n        \"bic\": \"CHASDEFX\"\r\n      }\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/get",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection demonstrates the process of generating a JWT/Digital Signature directly from Postman. Certain requests within our UAT/Prod environments necessitate this encoding in the JSON body. However, you still have the option to provide your access token for OAuth authentication.\n\nTo execute this collection:\n\n1. Acquire your CLIENT_ID and CLIENT_SECRET. Detailed instructions can be found here: [https://developer.payments.jpmorgan.com/quick-start](https://developer.payments.jpmorgan.com/quick-start)\n    \n2. Insert these values into the authorization request for OAuth getAccessToken.\n    \n3. Execute the getAccessToken request.\n    \n4. Collect your private key and include it in your Postman variables as 'priv_key'.\n    \n5. Copy the request body into the sign payload request.\n    \n6. Execute the sign payload request.\n    \n7. Execute the initiate a payment request."
				},
				{
					"name": "getAccessToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Save access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    var accessToken = jsonData.access_token",
									"    pm.collectionVariables.set(\"access_token\", accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "CLIENT_SECRET",
									"type": "string"
								},
								{
									"key": "username",
									"value": "CLIENT_ID",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "jpm:payments:sandbox",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://id.payments.jpmorgan.com/am/oauth2/alpha/access_token",
							"protocol": "https",
							"host": [
								"id",
								"payments",
								"jpmorgan",
								"com"
							],
							"path": [
								"am",
								"oauth2",
								"alpha",
								"access_token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Online-payments-create-a-payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "merchant-id",
								"value": "998482157630"
							},
							{
								"key": "minorVersion",
								"value": ""
							},
							{
								"key": "request-id",
								"value": "10cc0270-7bed-11e9-a188-1763956dd7f6"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"captureMethod\": \"NOW\",\n  \"amount\": 1234,\n  \"currency\": \"USD\",\n  \"merchant\": {\n    \"merchantSoftware\": {\n      \"companyName\": \"Payment Company\",\n      \"productName\": \"Application Name\",\n      \"version\": \"1.235\"\n    },\n    \"merchantCategoryCode\": \"4899\"\n  },\n  \"paymentMethodType\": {\n    \"card\": {\n      \"accountNumber\": \"4012000033330026\",\n      \"expiry\": {\n        \"month\": 5,\n        \"year\": 2027\n      },\n      \"isBillPayment\": true\n    }\n  },\n  \"initiatorType\": \"CARDHOLDER\",\n  \"accountOnFile\": \"NOT_STORED\",\n  \"isAmountFinal\": true\n}"
						},
						"url": {
							"raw": "https://api-mock.payments.jpmorgan.com/api/v2/payments",
							"protocol": "https",
							"host": [
								"api-mock",
								"payments",
								"jpmorgan",
								"com"
							],
							"path": [
								"api",
								"v2",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Global-payments-init-a-payment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payments\": {\n    \"possibleDuplicateMessage\": false,\n    \"paymentIdentifiers\": {\n      \"endToEndId\": \"AD202109311354152\"\n    },\n    \"requestedExecutionDate\": \"2023-04-22\",\n    \"transferType\": \"CREDIT\",\n    \"paymentCurrency\": \"GBP\",\n    \"paymentAmount\": 650,\n    \"paymentType\": \"RTP\",\n    \"debtor\": {\n      \"debtorAccount\": {\n        \"accountId\": \"12311871\",\n        \"accountCurrency\": \"GBP\",\n        \"accountType\": \"DDA\"\n      },\n      \"ultimateDebtor\": {\n        \"ultimateDebtorName\": \"Wayne Thompson\",\n        \"postalAddress\": {\n          \"addressType\": \"ADDR\",\n          \"streetName\": \"Lennon Road\",\n          \"buildingNumber\": \"22\",\n          \"townName\": \"Liverpool\",\n          \"country\": \"GB\"\n        },\n        \"countryOfResidence\": \"GB\",\n        \"organizationId\": {\n          \"bic\": \"CHASGB2L\",\n          \"id\": \"40025916\"\n        }\n      }\n    },\n    \"debtorAgent\": {\n      \"financialInstitutionId\": {\n        \"bic\": \"CHASGB2L\"\n      }\n    },\n    \"creditorAgent\": {\n      \"financialInstitutionId\": {\n        \"clearingSystemId\": {\n          \"id\": \"185008\"\n        }\n      }\n    },\n    \"creditor\": {\n      \"creditorName\": \"David Burn\",\n      \"postalAddress\": {\n        \"addressType\": \"ADDR\",\n        \"streetName\": \"Fratton Park\",\n        \"buildingNumber\": \"411\",\n        \"postalCode\": \"PO48RA\",\n        \"townName\": \"Portsmouth\",\n        \"country\": \"GB\",\n        \"countrySubDvsn\": \"Hampshire\"\n      },\n      \"countryOfResidence\": \"GB\",\n      \"creditorAccount\": {\n        \"accountId\": \"87654321\"\n      },\n      \"ultimateCreditor\": {\n        \"ultimateCreditorName\": \"Clint Hall\",\n        \"individualId\": {\n          \"id\": \"87654321\"\n        },\n        \"postalAddress\": {\n          \"addressType\": \"ADDR\",\n          \"streetName\": \"Fratton Park\",\n          \"buildingNumber\": \"411\",\n          \"postalCode\": \"PO48RA\",\n          \"townName\": \"Portsmouth\",\n          \"country\": \"GB\",\n          \"countrySubDvsn\": \"Hampshire\"\n        }\n      }\n    },\n    \"purpose\": {\n      \"code\": \"GDDS\",\n      \"type\": \"CODE\"\n    },\n    \"remittanceInformation\": {\n      \"unstructuredInformation\": [\n        \"Payment for Macbook batteries Receipt #AXF23-LGG\"\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "https://api-mock.payments.jpmorgan.com/tsapi/v1/payments",
							"protocol": "https",
							"host": [
								"api-mock",
								"payments",
								"jpmorgan",
								"com"
							],
							"path": [
								"tsapi",
								"v1",
								"payments"
							]
						}
					},
					"response": []
				}
			],
			"description": "In this collection, we demonstrate the process of obtaining an access token to access our APIs. Additionally, we've provided sample requests for utilizing our APIs. Upon executing the 'getAccessToken' request, the token will be stored in a collection variable for use in subsequent requests.\n\nFor information on obtaining the CLIENT_ID and CLIENT_SECRET necessary for generating the access token, please refer to the following link: [https://developer.payments.jpmorgan.com/quick-start](https://developer.payments.jpmorgan.com/quick-start)"
		},
		{
			"name": "Backend-examples",
			"item": [
				{
					"name": "Basic Post Request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payments\": {\n    \"possibleDuplicateMessage\": false,\n    \"paymentIdentifiers\": {\n      \"endToEndId\": \"AD202109311354152\"\n    },\n    \"requestedExecutionDate\": \"2023-04-22\",\n    \"transferType\": \"CREDIT\",\n    \"paymentCurrency\": \"GBP\",\n    \"paymentAmount\": 650,\n    \"paymentType\": \"RTP\",\n    \"debtor\": {\n      \"debtorAccount\": {\n        \"accountId\": \"12311871\",\n        \"accountCurrency\": \"GBP\",\n        \"accountType\": \"DDA\"\n      },\n      \"ultimateDebtor\": {\n        \"ultimateDebtorName\": \"Wayne Thompson\",\n        \"postalAddress\": {\n          \"addressType\": \"ADDR\",\n          \"streetName\": \"Lennon Road\",\n          \"buildingNumber\": \"22\",\n          \"townName\": \"Liverpool\",\n          \"country\": \"GB\"\n        },\n        \"countryOfResidence\": \"GB\",\n        \"organizationId\": {\n          \"bic\": \"CHASGB2L\",\n          \"id\": \"40025916\"\n        }\n      }\n    },\n    \"debtorAgent\": {\n      \"financialInstitutionId\": {\n        \"bic\": \"CHASGB2L\"\n      }\n    },\n    \"creditorAgent\": {\n      \"financialInstitutionId\": {\n        \"clearingSystemId\": {\n          \"id\": \"185008\"\n        }\n      }\n    },\n    \"creditor\": {\n      \"creditorName\": \"David Burn\",\n      \"postalAddress\": {\n        \"addressType\": \"ADDR\",\n        \"streetName\": \"Fratton Park\",\n        \"buildingNumber\": \"411\",\n        \"postalCode\": \"PO48RA\",\n        \"townName\": \"Portsmouth\",\n        \"country\": \"GB\",\n        \"countrySubDvsn\": \"Hampshire\"\n      },\n      \"countryOfResidence\": \"GB\",\n      \"creditorAccount\": {\n        \"accountId\": \"87654321\"\n      },\n      \"ultimateCreditor\": {\n        \"ultimateCreditorName\": \"Clint Hall\",\n        \"individualId\": {\n          \"id\": \"87654321\"\n        },\n        \"postalAddress\": {\n          \"addressType\": \"ADDR\",\n          \"streetName\": \"Fratton Park\",\n          \"buildingNumber\": \"411\",\n          \"postalCode\": \"PO48RA\",\n          \"townName\": \"Portsmouth\",\n          \"country\": \"GB\",\n          \"countrySubDvsn\": \"Hampshire\"\n        }\n      }\n    },\n    \"purpose\": {\n      \"code\": \"GDDS\",\n      \"type\": \"CODE\"\n    },\n    \"remittanceInformation\": {\n      \"unstructuredInformation\": [\n        \"Payment for Macbook batteries Receipt #AXF23-LGG\"\n      ]\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8001/tsapi/v1/payments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"tsapi",
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Basic Get Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"description": "This folder includes basic requests for testing out our backend examples code."
		}
	],
	"variable": [
		{
			"key": "CLIENT_SECRET",
			"value": "y_OAgjpmVcEL1vpPDI9SXjIkdUYWBXpl8UIWHIVIlRW45zsl2q0EjfL_ffGkUDn02X2_RDZWe1buriJPrTwmeA"
		},
		{
			"key": "CLIENT_SECRET",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		}
	]
}